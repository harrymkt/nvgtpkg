class toml {
	toml_section@[] sections(0);
	toml() {
		this.initialize_section();
	}
	bool load(string filename) {
		file f;
		if (f.open(filename, "r")) {
			string t = f.read();
			f.close();
			return this.loads(t);
		}
		return false;
	}
	bool load(file@ f) {
		if (@f != null && f.active) return this.loads(f.read());
		return false;
	}
	bool loads(string str) {
		this.parse(str);
		return this.sections.length() > 0;
	}
	toml_section@ initialize_section(string name = "", bool create = true) {
		if (name == "" && this.sections.length() < 1 && create) {
			this.sections.insert_last(toml_section(name));
			return @this.sections[0];
		} else if (name == "" && this.sections.length() > 0) return @this.sections[0];
		else if (name != "") {
			int index = this.section_index[name];
			if (index < 0 && create) {
				toml_section@ t = toml_section(name);
				this.sections.insert_last(t);
				return @t;
			}
			return (index > -1 ? @this.sections[index] : null);
		}
		return null;
	}
	void parse(string d) {
		this.sections.resize(0);
		toml_section@ t = this.initialize_section("");
		d.replace_this("\r\n", "\n");
		string[] lines = d.split("\n");
		if (lines.length() < 1) return;
		for (uint i = 0; i < lines.length(); i++) {
			string l = lines[i].trim_whitespace();
			if (l.starts_with("#")) continue;
			string key = l, value;
			int ei = l.find("=");
			if (ei > -1) {
				key = l.substr(0, ei).trim_whitespace();
				value = l.substr(ei + 1);
			}
			int comment = value.find("#");
			if (comment > -1) {
				int q = value.rfind('"', comment);
				if (q > -1) value = value.slice(0, q + 1);
				else {
					q = value.find("#");
					if (q > -1) value = value.slice(0, q);
				}
			}
			value.trim_whitespace_this();
			string oneval = value.split(" ")[0];
			if (key == "") continue;
			if (key.starts_with("[") && key.ends_with("]")) {
				string name = "";
				if (key.length() > 2) name = key.slice(1, key.length() - 1);
				@t = this.initialize_section(name);
				continue;
			}
			//if (value == "") continue;
			if (value.starts_with('"') && value.ends_with('"'))
				t.set(key, value.slice(1, value.length() - 1));
			else if (oneval.find(".") > -1) {
				double f = parse_double(oneval);
				t.set(key, f);
			}
			else if (oneval.is_digits())
				t.set(key, parse_int(oneval));
			else if (value.starts_with("[") && value.ends_with("]")) {
				string[] va = value.split(",");
				if (value.find('"') > -1) va = value.split('",');
				if (va.length() < 1) continue;
				t.set(key, va);
			}
		}
	}
	string[] get_keys(string name, bool all = false) {
		if (this.sections.length() < 1) return {};
		string[] k;
		for (uint a = 0; a < this.sections.length(); a++) {
			if ((!all && this.sections[a].name == name) || (all)) k.insert_last(this.sections[a].keys);
		}
		return {};
	}
	string dump(bool indent = true) {
		if (this.sections.length() < 1) return "";
		string final = "";
		for (uint a = 0; a < this.sections.length(); a++) {
			int indentsize = (indent ? 1 : 0);
			toml_section@ s = @this.sections[a];
			if (indent) {
				string[] parse = (s.name).split(".");
				if (parse.length() > 0) indentsize = parse.length();
			}
			final += this.sections[a].dump(true, indentsize, indentsize - 1);
		}
		return final;
	}
	var@ get(string section, string key, var@ def = null) {
		if (this.sections.length() < 1) return def;
		for (uint a = 0; a < this.sections.length(); a++) {
			toml_section@ s = @this.sections[a];
			if (s.name == section) return s.get(key, def);
		}
		return def;
	}
	void set(string section, string key = "", any@ value = null) {
		toml_section@ t = this.initialize_section(section);
		if (@t != null && key != "" && @value != null) t.set(key, value);
	}
	int get_section_index(string section) property {
		if (this.sections.length() < 1) return -1;
		for (uint a = 0; a < this.sections.length(); a++) {
			if (this.sections[a].name == section) return a;
		}
		return -1;
	}
	bool remove(string section, string key = "") {
		toml_section@ t = this.initialize_section(section, false);
		if (@t == null) return false;
		if (key != "") return t.remove(key);
		int x = this.section_index[t.name];
		if (x > -1) this.sections.remove_at(x);
		return this.section_index[t.name] < 0;
	}
}
class toml_section {
	dictionary data;
	string name;
	private string[] knames;
	toml_section(string name, dictionary data = dictionary()) {
		this.name = name;
		this.data = data;
	}
	private bool add(string key, any@ v) {
		if (@v is null) return false;
		bool r = true;
		string vstr;
		double vdouble;
		int vint;
		if (v.retrieve(vstr)) this.data.set(key, vstr);
		else if (v.retrieve(vdouble)) this.data.set(key, vdouble);
		else if (v.retrieve(vint)) this.data.set(key, vint);
		else r = false;
		return r;
	}
	void set(string key, any@ value) {
		if (this.add(key, value)) this.knames.insert_last(key);
	}
	string[] get_keys() property {
		return this.knames;
	}
	var@ get(string key, var@ def = null) {
		if (!this.data.exists(key)) return def;
		string vstr;
		double vdouble;
		int vint;
		if (this.data.get(key, vstr)) return vstr;
		else if (this.data.get(key, vdouble)) return vdouble;
		else if (this.data.get(key, vint)) return vint;
		else return def;
	}
	bool remove(string key) {
		int f = this.knames.find(key);
		if (f > -1) this.knames.remove_at(f);
		if (!this.data.exists(key)) return false;
		return this.data.delete(key);
	}
	string dump(bool head, int indent_size = 0, int indent_head_size = 0) {
		if (this.keys.length() < 1) return "";
		string final = "";
		string indent, indenthead;
		int ind = indent_size, indhead = indent_head_size;
		while(ind > 0) {
			indent += "\t";
			ind--;
		}
		while(indhead > 0) {
			indenthead += "\t";
			indhead--;
		}
		if (head && this.name != "") final += "%0[%1]\n".format(indenthead, this.name);
		string[] k = this.keys;
		for (uint a = 0; a < k.length(); a++) {
			var@ v = this.get(k[a], 0);
			if (@v is null) continue;
			string[] vals = {string(v)};
			if (v.is_string) vals = {'"', v, '"'};
			final += (this.name != "" && head ? indent : "") + k[a] + " = " + join(vals, "") + "\n";
		}
		return final;
	}
}